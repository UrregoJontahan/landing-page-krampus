---
import "../styles/hero.css"
import '@fontsource-variable/lexend';
import ComputerScene from "./ComputerScene.astro";
import { getLangFromUrl, useTranslations } from "../i18n/utils"

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
---
<section class="w-full h-screen flex flex-col items-center justify-center p-8 mt-32">
    <div class="container mx-auto flex flex-col-reverse md:flex-row items-center mt-96 ml-24">
        <div class="flex flex-col justify-center max-w-lg">
            <h1 class="text-7xl font-bold text-white leading-tight mb-6">
                {t("title")}
            <br />{t("with")} 
            <span class="text-green-400">Krampus</span></h1>
            <p class="text-gray-300 text-lg mb-6">
                {t("description")}
            </p>
        </div>
        <!-- <div class="relative mb-12 md:mb-0 left-[100px]">
            <img src="../../public/images/image.webp" alt="Krampus ProgramaciÃ³n en Pareja" 
            class="shadow-lg rounded-lg object-cover w-[900px] h-[600px] bg-green-400">
        </div> -->
        <ComputerScene/>
    </div>
    <h2 class="text-8xl font-bold text-white flex flex-col items-center sub-title p-16 gap-y-8 mt-24"
        id="sub-title">
        <span class="part-one no-show">ELEVATE</span> 
        <span class="part-two no-show">THE PAIR</span>
        <span class="part-three no-show">PROGRAMMING EXPERIENCE</span>
    </h2> 
</section>
   
<script>
    const subTitle:any = document.getElementById("sub-title");
    const spans = document.querySelectorAll("#sub-title span");
      
    window.addEventListener("scroll", () => {
        const scrollPosition = window.scrollY;
    
        if (scrollPosition > 100) {
            subTitle.classList.add("sub-title-fixed");
           } else {
            subTitle.classList.remove("sub-title-fixed");
        }
        if (scrollPosition < 700) {
            subTitle.classList.remove("sub-title-fixed");
        } else {
            subTitle.classList.add("sub-title-fixed");
        }
    
    });
    
    const options = {
        root: null,
        rootMargin: "0px",
        threshold: 0.7
    };
    
    const observerCallback = (entries:any) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.remove("no-show");
            }
        });
    };
    
    const observer = new IntersectionObserver(observerCallback, options);
    
    spans.forEach(span => {
        observer.observe(span);
    });
</script>
    